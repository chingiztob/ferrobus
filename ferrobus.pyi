# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing

class IsochroneIndex:
    def len(self) -> builtins.int:
        ...

    def is_empty(self) -> builtins.bool:
        ...

    def resolution(self) -> builtins.int:
        ...


class TransitModel:
    def stop_count(self) -> builtins.int:
        ...

    def route_count(self) -> builtins.int:
        ...

    def feeds_info(self) -> builtins.str:
        ...

    def __repr__(self) -> builtins.str:
        ...

    def __str__(self) -> builtins.str:
        ...


class TransitPoint:
    r"""
    Python wrapper for TransitPoint
    """
    def new(self, lat:builtins.float, lon:builtins.float, transit_model:TransitModel, max_walking_time:builtins.int, max_nearest_stops:builtins.int) -> TransitPoint:
        ...

    def coordinates(self) -> tuple[builtins.float, builtins.float]:
        r"""
        Get the coordinates of this transit point
        """
        ...

    def __repr__(self) -> builtins.str:
        ...

    def nearest_stops(self) -> builtins.list[builtins.int]:
        ...


def calculate_bulk_isochrones(transit_data:TransitModel, starts:typing.Sequence[TransitPoint], departure_time:builtins.int, max_transfers:builtins.int, cutoff:builtins.int, index:IsochroneIndex) -> builtins.list[builtins.str]:
    ...

def calculate_isochrone(transit_data:TransitModel, start:TransitPoint, departure_time:builtins.int, max_transfers:builtins.int, cutoff:builtins.int, index:IsochroneIndex) -> builtins.str:
    ...

def create_isochrone_index(transit_data:TransitModel, area:builtins.str, cell_resolution:builtins.int, max_walking_time:builtins.int) -> IsochroneIndex:
    ...

def create_transit_point(lat:builtins.float, lon:builtins.float, transit_model:TransitModel, max_walking_time:builtins.int, max_nearest_stops:builtins.int) -> TransitPoint:
    ...

def find_route(transit_model:TransitModel, start_point:TransitPoint, end_point:TransitPoint, departure_time:builtins.int, max_transfers:builtins.int) -> typing.Any:
    ...

def find_routes_one_to_many(transit_model:TransitModel, start_point:TransitPoint, end_points:typing.Sequence[TransitPoint], departure_time:builtins.int, max_transfers:builtins.int) -> builtins.list[typing.Any]:
    ...

def py_create_transit_model(osm_path:builtins.str, gtfs_dirs:typing.Sequence[builtins.str], day_of_week:builtins.str, max_transfer_time:builtins.int) -> TransitModel:
    ...

def travel_time_matrix(transit_model:TransitModel, points:typing.Sequence[TransitPoint], departure_time:builtins.int, max_transfers:builtins.int) -> builtins.list[builtins.list[typing.Optional[builtins.int]]]:
    ...

